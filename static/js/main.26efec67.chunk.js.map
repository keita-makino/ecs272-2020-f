{"version":3,"sources":["App.tsx","constructors/shapeConstructors.ts","constructors/shapeSetConstructor.ts","utils/countInterferenceNodes.ts","utils/getClosestNeightboringNode.ts","utils/getCenterNodeAlongEdge.ts","utils/rerouteEdgePoint.ts","utils/doesPointExist.ts","utils/isPointIncluded.ts","utils/rerouteEdges.ts","utils/connectNodes.ts","utils/getVirtualEdges.ts","constructors/areaDomainConstructor.ts","utils/getPaths.ts","utils/isAllContained.ts","utils/evaluateRepulsion.ts","utils/fillPotentialGrid.ts","utils/getContour.ts","uses/useRoom.ts","uses/useFilteredData.ts","uses/useUser.ts","uses/useBusy.ts","uses/useContoursEdges.ts","uses/useScatters.ts","uses/usePlotData.ts","utils/getIcon.ts","components/molecules/ToolTip.tsx","utils/updateVis.ts","components/molecules/AddRecordToolTip.tsx","utils/geocoder.ts","components/organisms/Map.tsx","components/atoms/ToggleLabel.tsx","components/atoms/SliderLabel.tsx","components/molecules/ControlPanel.tsx","components/atoms/TypeLabel.tsx","components/atoms/AddType.tsx","components/molecules/TypeLabelPanel.tsx","components/molecules/TitlePanel.tsx","components/organisms/Sidebar.tsx","components/molecules/ChangeMode.tsx","components/organisms/MiddlePanel.tsx","components/templates/Index.tsx","data/initialState.ts","data/theme.ts","pages/Index.tsx","serviceWorker.ts","index.tsx"],"names":["cache","InMemoryCache","freezeResults","link","HttpLink","uri","client","ApolloClient","resolvers","writeData","data","session","userId","roomId","editMode","modifying","computing","loaded","__typename","hot","module","createEdge","s","e","start","end","center","add","scale","length","getDistance","getCorrespondingBuffer","a","r","array","numOfSegments","Math","ceil","Number","EPSILON","Array","fill","map","item","index","c","sub","position","lng","domain","boundary","xMin","cellSize","lat","yMin","diff","floor","height","item2","index2","push","numOfCells","filter","indexOf","createNode","radius","getDistanceToEdge","xC","yC","dot","param","pow","undefined","point","createArea","d","buffer","Float32Array","getBuffer","x","y","setBuffer","v","getPosition","createPoint","p","sqrt","n","createShapeSet","nodes","type","activeFunctions","getBoundary","getCenter","reduce","prev","curr","shapeSet","parentSet","getDistanceToCenter","parent","countInterferenceNodes","inactiveSetNodes","edge","getClosestNeightboringNode","node","visited","numOfInterferenceNodes","distance","minDistance","closestNeighboringNode","Promise","resolve","POSITIVE_INFINITY","getCenterNodeAlongEdge","_prev","distanceRatio","minDistanceRatio","rerouteEdgePoint","wrapNormal","internalDivision","closestPointOnEdge","newPoint","doesPointExist","edges","isPointIncluded","rerouteEdges","edgesToCheck","scannedEdges","hasIntersection","iterations","pop","centerNode","tempBufferForMorphing","isExisted","isIncluded","reroutedPoint","edge1","edge2","combinedEdge","connectNodes","activeSetNodes","all","slice","testEdge","flat","getVirtualEdges","activeSet","inactiveSet","sort","b","createAreaDomain","getRange","range","xMax","yMax","set","min","max","getPaths","threshold","result","contours","size","area","smooth","contour","from","coordinates","isAllContained","path","prev2","curr2","polygonContains","evaluateRepulsion","potentialGrid","target","factor","element","dr","fillPotentialGrid","parameter","rDiff","inverse","getContour","r0","r1","iteration","factorNode","factorNodeNegative","factorEdge","points","getCoordinates","GET_ROOM","gql","GET_CURRENT_ROOM_ID","useCurrentRoom","useQuery","useRoom","id","variables","room","useFilteredData","useState","filtered","setFiltered","useEffect","recordType","active","GET_USER","GET_CURRENT_USER_ID","useCurrentUser","useUser","user","GET_BUSY","changeBusy","changeTo","readQuery","query","writeQuery","useBusy","state","setState","useContoursEdges","recordTypes","isModifying","contoursEdges","setContoursEdges","f","_index","record","setting","markSize","name","color","newContoursEdges","flatMap","useScatters","scatters","setScatters","newRecordTypes","properties","fillColor","typeId","address","geometry","features","usePlotData","useApolloClient","plotData","setPlotData","getIcon","foodMarket","busStop","restaurant","medicalClinic","DELETE_RECORD","ToolTip","props","currentRoom","useMutation","update","deleteOneRecord","typeIndex","findIndex","newRoom","mutation","Card","style","maxWidth","zIndex","top","left","Grid","container","xs","padding","alignItems","justify","Icon","camelcase","Typography","variant","ButtonBase","onClick","where","setTooltip","HighlightOff","Divider","updateVis","recordIndex","newElement","CREATE_RECORD","AddRecordToolTip","createOneRecord","console","log","newRecord","connect","React","setType","setName","options","value","width","TextField","label","onChange","event","select","option","MenuItem","key","Button","setAddRecordTooltip","typeInstance","find","newData","initializeGeocoder","apiKey","maps","createClient","UPDATE_RECORD_TYPE","Map","selected","setSelected","addRecordTooltip","tooltip","geocoder","isComputing","window","useWindowSize","viewState","view","setView","layer","bubble","PolygonLayer","extruded","stroked","getPolygon","getFillColor","LineLayer","getSourcePosition","getTargetPosition","getColor","scatter","EditableGeoJsonLayer","mode","TranslateMode","selectedFeatureIndexes","filled","getLineWidth","zoom","getRadius","pickable","onEdit","updatedData","editType","reverseGeocode","latlng","error","background","mapboxApiAccessToken","mapStyle","darkMode","source","source-layer","paint","layers","getCursor","info","coordinate","json","results","formatted_address","object","onDragStart","controller","onViewStateChange","UPDATE_USER","ToggleLabel","status","setStatus","Switch","checked","disabled","SliderLabel","step","Slider","valueLabelDisplay","onChangeCommitted","ControlPanel","paddingTop","title","sliderArray","toggleArray","DELETE_RECORD_TYPE","TypeLabel","updateOneRecordType","updateRecordType","deleteOneRecordType","deleteRecordType","hsl","hex","rgb","icon","Checkbox","canDelete","CREATE_RECORD_TYPE","AddType","theme","useTheme","createOneRecordType","palette","text","primary","Add","defaultValue","IconButton","newRecordType","create","Done","TypePanel","setRecordTypes","direction","TitlePanel","useTransform","align","paddingRight","div","rotate","margin","KeyboardArrowDown","fontSize","useStyles","makeStyles","titlePanel","expansion","backgroundColor","main","glass","backdropFilter","contents","boxSizing","Sidebar","classes","useSpring","stiffness","mass","o","className","opacity","controlPanel","bottom","right","href","HelpOutline","GET_MODE","ChangeMode","Visibility","Edit","middlePanel","MiddlePanel","alignContent","wrapper","mainVis","Index","sideBarProps","mapProps","initialStateIndex","sideBar","longitude","latitude","pitch","bearing","defaultTheme","responsiveFontSizes","createMuiTheme","dark","light","secondary","darkTheme","Boolean","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26efec67.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport Index from './pages/Index';\nimport { hot } from 'react-hot-loader';\n\nconst cache = new InMemoryCache({\n  freezeResults: true\n});\nconst link = new HttpLink({\n  uri: 'https://ecs272-2020-f.herokuapp.com/'\n});\n\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\n  cache,\n  resolvers: {},\n  link\n});\n\ncache.writeData({\n  data: {\n    session: {\n      userId: 1,\n      roomId: 1,\n      editMode: false,\n      modifying: false,\n      computing: false,\n      loaded: false,\n      __typename: 'session'\n    }\n  }\n});\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Index />\n    </ApolloProvider>\n  );\n};\n\nexport default hot(module)(App);\n","import {\n  EdgeConstructor,\n  NodeConstructor,\n  Edge,\n  Point,\n  AreaConstructor,\n  Node,\n  Area,\n  PointConstructor,\n  AreaDomain,\n  PathConstructor,\n  Path\n} from '../types/Shapes';\n\nconst createPath: PathConstructor = (a: Point[]): Path => ({\n  points: a,\n  getCoordinates: () => a.map(item => [item.lng, item.lat])\n});\n\nconst createEdge: EdgeConstructor = (s: Point, e: Point): Edge => ({\n  start: s,\n  end: e,\n  center: s.add(e).scale(0.5),\n  length: s.getDistance(e),\n  getCorrespondingBuffer: (a: Area, r: number) => {\n    const array: number[] = [];\n\n    const length = s.getDistance(e);\n    const numOfSegments = Math.ceil((length + Number.EPSILON) / (2 * r));\n\n    Array(numOfSegments + 1)\n      .fill(0)\n      .map((item, index) => {\n        const c = s.add(e.sub(s).scale(index / numOfSegments));\n\n        const position = [\n          (c.lng - a.domain.boundary.xMin) / a.domain.cellSize,\n          (c.lat - a.domain.boundary.yMin) / a.domain.cellSize\n        ];\n\n        const diff = r / a.domain.cellSize;\n\n        const [xMin, xMax, yMin, yMax] = [\n          Math.floor(position[0] - diff),\n          Math.ceil(position[0] + diff),\n          Math.floor(position[1] - diff),\n          Math.ceil(position[1] + diff)\n        ];\n\n        const width = xMax - xMin;\n        const height = yMax - yMin;\n\n        Array(width + 1)\n          .fill(0)\n          .map((item, index) => {\n            Array(height + 1)\n              .fill(0)\n              .map((item2, index2) => {\n                array.push(\n                  xMin + index + (yMin + index2) * a.domain.numOfCells[0]\n                );\n              });\n          });\n      });\n\n    return array.filter((item, index, array) => array.indexOf(item) === index);\n  }\n});\n\nconst createNode: NodeConstructor = (c: Point, r?: number): Node => {\n  return {\n    center: c,\n    radius: r ? r : 0.002,\n    getDistanceToEdge: (e: Edge) => {\n      const xC = c.lng - e.start.lng;\n      const yC = c.lat - e.start.lat;\n      const xE = e.end.lng - e.start.lng;\n      const yE = e.end.lat - e.start.lat;\n\n      const dot = xC * xE + yC * yE;\n\n      const param = e.length !== 0 ? dot / Math.pow(e.length, 2) : undefined;\n\n      const point = param\n        ? param < 0\n          ? e.start\n          : param > 1\n          ? e.end\n          : e.start.add(e.end.sub(e.start).scale(param))\n        : undefined;\n\n      return point ? c.getDistance(point) : c.getDistance(e.center);\n    },\n    getCorrespondingBuffer: (a: Area, r: number) => {\n      const array: number[] = [];\n      const position = [\n        (c.lng - a.domain.boundary.xMin) / a.domain.cellSize,\n        (c.lat - a.domain.boundary.yMin) / a.domain.cellSize\n      ];\n\n      const diff = r / a.domain.cellSize;\n\n      const [xMin, xMax, yMin, yMax] = [\n        Math.floor(position[0] - diff),\n        Math.ceil(position[0] + diff),\n        Math.floor(position[1] - diff),\n        Math.ceil(position[1] + diff)\n      ];\n\n      const width = xMax - xMin;\n      const height = yMax - yMin;\n\n      Array(width + 1)\n        .fill(0)\n        .map((item, index) => {\n          Array(height + 1)\n            .fill(0)\n            .map((item2, index2) => {\n              array.push(\n                xMin + index + (yMin + index2) * a.domain.numOfCells[0]\n              );\n            });\n        });\n\n      return array;\n    }\n  };\n};\n\nconst createArea: AreaConstructor = (d: AreaDomain): Area => {\n  const s = d.numOfCells;\n  const buffer = new Float32Array(s[0] * s[1]);\n  return {\n    buffer: buffer,\n    domain: d,\n    getBuffer: (x: number, y: number) => buffer[x + y * s[0]],\n    setBuffer: (x: number, y: number, v: number) => {\n      buffer[x + y * s[0]] = v;\n    },\n    getPosition: (x: number, y: number) =>\n      createPoint(\n        d.boundary.xMin + d.cellSize * x,\n        d.boundary.yMin + d.cellSize * y\n      )\n  };\n};\n\nconst createPoint: PointConstructor = (x: number, y: number): Point => ({\n  lng: x,\n  lat: y,\n  getDistance: (p: Point) =>\n    Math.sqrt(Math.pow(p.lng - x, 2) + Math.pow(p.lat - y, 2)),\n  scale: (n: number) => createPoint(x * n, y * n),\n  add: (p: Point) => createPoint(x + p.lng, y + p.lat),\n  sub: (p: Point) => createPoint(x - p.lng, y - p.lat)\n});\n\nexport { createEdge, createPath, createPoint, createNode, createArea };\n","import { ShapeConstructor, ShapeSet } from '../types/ShapeSet';\nimport { Node } from '../types/Shapes';\nimport { createNode, createPoint } from './shapeConstructors';\n\nconst createShapeSet: ShapeConstructor = (\n  nodes: Node[],\n  type: 'base' | 'active'\n) => {\n  const activeFunctions =\n    type === 'active'\n      ? {\n          getBoundary: () => [createPoint(5, 5)],\n          getCenter: () =>\n            createPoint(\n              nodes.reduce((prev, curr) => prev + curr.center.lng, 0) /\n                nodes.length,\n              nodes.reduce((prev, curr) => prev + curr.center.lat, 0) /\n                nodes.length\n            )\n        }\n      : undefined;\n\n  const shapeSet = {\n    nodes: nodes.map(item => {\n      const point = createPoint(item.center.lng, item.center.lat);\n      const parentSet = {\n        getDistanceToCenter: activeFunctions\n          ? () => point.getDistance(activeFunctions.getCenter())\n          : undefined\n      };\n      return {\n        ...createNode(point, item.radius),\n        ...parentSet\n      };\n    }),\n    ...activeFunctions\n  } as ShapeSet;\n\n  shapeSet.nodes = shapeSet.nodes.map(item => ({ ...item, parent: shapeSet }));\n  return shapeSet;\n};\n\nexport { createShapeSet };\n","import { Node, Edge } from '../types/Shapes';\nexport const countInterferenceNodes = async (\n  inactiveSetNodes: Node[],\n  edge: Edge\n) => {\n  return inactiveSetNodes.reduce(\n    (prev, curr) =>\n      curr.getDistanceToEdge(edge) < curr.radius ? prev + 1 : prev,\n    0\n  );\n};\n","import { ShapeSetActive } from '../types/ShapeSet';\nimport { Node } from '../types/Shapes';\nimport { createEdge } from '../constructors/shapeConstructors';\nimport { countInterferenceNodes } from './countInterferenceNodes';\n\nexport const getClosestNeightboringNode = async (\n  node: Node,\n  visited: ShapeSetActive,\n  inactiveSetNodes: Node[]\n) =>\n  (\n    await visited.nodes.reduce(\n      async (\n        prev: Promise<{\n          minDistance: number;\n          closestNeighboringNode: Node;\n        }>,\n        curr\n      ) => {\n        const edge = createEdge(node.center, curr.center);\n        const numOfInterferenceNodes = await countInterferenceNodes(\n          inactiveSetNodes,\n          edge\n        );\n        const distance = edge.length;\n        return Math.pow(distance, 2) * Math.pow(numOfInterferenceNodes + 1, 2) <\n          (await prev).minDistance\n          ? {\n              minDistance:\n                Math.pow(distance, 2) * Math.pow(numOfInterferenceNodes + 1, 2),\n              closestNeighboringNode: curr\n            }\n          : prev;\n      },\n      Promise.resolve({\n        minDistance: Number.POSITIVE_INFINITY,\n        closestNeighboringNode: visited.nodes[0]\n      })\n    )\n  ).closestNeighboringNode;\n","import { Node, Edge } from '../types/Shapes';\nexport const getCenterNodeAlongEdge = async (nodes: Node[], edge: Edge) =>\n  (\n    await nodes.reduce(\n      async (\n        _prev: Promise<{\n          minDistanceRatio: number;\n          closestNeighboringNode?: Node;\n        }>,\n        curr: Node\n      ) => {\n        const prev = await _prev;\n        const distanceRatio =\n          (2 * curr.center.getDistance(edge.center)) / edge.length;\n        return distanceRatio < prev.minDistanceRatio\n          ? { minDistanceRatio: distanceRatio, closestNeighboringNode: curr }\n          : prev;\n      },\n      Promise.resolve({\n        minDistanceRatio: 1,\n        closestNeighboringNode: undefined\n      })\n    )\n  ).closestNeighboringNode;\n","import { Node, Edge } from '../types/Shapes';\nexport const rerouteEdgePoint = async (\n  node: Node,\n  buffer: number,\n  edge: Edge,\n  wrapNormal: 1 | -1\n) => {\n  const internalDivision =\n    edge.start.getDistance(node.center) /\n    (edge.start.getDistance(node.center) + edge.end.getDistance(node.center));\n  const closestPointOnEdge = edge.start\n    .scale(1 - internalDivision)\n    .add(edge.end.scale(internalDivision));\n  const newPoint = node.center.add(\n    closestPointOnEdge\n      .sub(node.center)\n      .scale(\n        (wrapNormal * buffer * node.radius) / 2 / node.getDistanceToEdge(edge)\n      )\n  );\n  return newPoint;\n};\n","import { Edge, Point } from '../types/Shapes';\nimport { createNode } from '../constructors/shapeConstructors';\n\nexport const doesPointExist = async (point: Point, edges: Edge[]) => {\n  const node = createNode(point);\n  return edges.reduce((prev: Promise<boolean>, curr: Edge) => {\n    return (\n      prev ||\n      point.getDistance(curr.start) < node.radius ||\n      point.getDistance(curr.end) < node.radius\n    );\n  }, Promise.resolve(false));\n};\n","import { Node, Point } from '../types/Shapes';\nexport const isPointIncluded = async (point: Point, nodes: Node[]) =>\n  await nodes.reduce(\n    (prev: Promise<boolean>, curr: Node) =>\n      prev ||\n      point.getDistance(curr.center) < curr.radius ||\n      point.getDistance(curr.center) < curr.radius,\n    Promise.resolve(false)\n  );\n","import { Node, Edge, Point } from '../types/Shapes';\nimport { createEdge } from '../constructors/shapeConstructors';\nimport { getCenterNodeAlongEdge } from './getCenterNodeAlongEdge';\nimport { rerouteEdgePoint } from './rerouteEdgePoint';\nimport { doesPointExist } from './doesPointExist';\nimport { isPointIncluded } from './isPointIncluded';\nexport const rerouteEdges = async (\n  edgesToCheck: Edge[],\n  inactiveSetNodes: Node[]\n) => {\n  const scannedEdges = [];\n  if (edgesToCheck.length === 0) return;\n  let hasIntersection = true;\n  let iterations = 0;\n  while (hasIntersection && iterations < 100) {\n    hasIntersection = false;\n    while (!hasIntersection && edgesToCheck.length > 0) {\n      iterations += 1;\n      const edge = edgesToCheck.pop();\n      if (!edge) return scannedEdges;\n      const centerNode = await getCenterNodeAlongEdge(inactiveSetNodes, edge);\n      if (!centerNode) {\n        scannedEdges.push(edge);\n        continue;\n      } else {\n        if (centerNode.getDistanceToEdge(edge) > centerNode.radius) {\n          scannedEdges.push(edge);\n          continue;\n        }\n        let tempBufferForMorphing = 1.65;\n        let isExisted: boolean;\n        let isIncluded: boolean;\n        let reroutedPoint: Point;\n        do {\n          tempBufferForMorphing /= 1.1;\n          reroutedPoint = await rerouteEdgePoint(\n            centerNode,\n            tempBufferForMorphing,\n            edge,\n            1\n          );\n          isExisted =\n            (await doesPointExist(reroutedPoint, edgesToCheck)) ||\n            (await doesPointExist(reroutedPoint, scannedEdges));\n          isIncluded = await isPointIncluded(reroutedPoint, inactiveSetNodes);\n        } while (!isExisted && isIncluded && tempBufferForMorphing > 1);\n        if (!isExisted && !isIncluded && reroutedPoint) {\n          edgesToCheck.push(\n            createEdge(edge.start, reroutedPoint),\n            createEdge(reroutedPoint, edge.end)\n          );\n          hasIntersection = true;\n        } else {\n          tempBufferForMorphing = 1.65;\n          do {\n            tempBufferForMorphing /= 1.1;\n            reroutedPoint = await rerouteEdgePoint(\n              centerNode,\n              tempBufferForMorphing,\n              edge,\n              -1\n            );\n            isExisted =\n              (await doesPointExist(reroutedPoint, edgesToCheck)) ||\n              (await doesPointExist(reroutedPoint, scannedEdges));\n            isIncluded = await isPointIncluded(reroutedPoint, inactiveSetNodes);\n          } while (!isExisted && isIncluded && tempBufferForMorphing > 1);\n          if (!isExisted && reroutedPoint) {\n            edgesToCheck.push(\n              createEdge(edge.start, reroutedPoint),\n              createEdge(reroutedPoint, edge.end)\n            );\n            hasIntersection = true;\n          }\n        }\n      }\n    }\n  }\n  while (edgesToCheck.length > 0) {\n    scannedEdges.push(edgesToCheck.pop()!);\n  }\n  while (scannedEdges.length > 0) {\n    const edge1 = scannedEdges.pop()!;\n    if (scannedEdges.length > 0) {\n      const edge2: Edge = scannedEdges.pop()!;\n      const combinedEdge = createEdge(edge1.start, edge2.end);\n      const closestNode = await getCenterNodeAlongEdge(\n        inactiveSetNodes,\n        combinedEdge\n      );\n      if (!closestNode) {\n        scannedEdges.push(combinedEdge);\n      } else {\n        edgesToCheck.push(edge1);\n        scannedEdges.push(edge2);\n      }\n    } else {\n      edgesToCheck.push(edge1);\n    }\n  }\n  return edgesToCheck;\n};\n","import { ShapeSetActive } from '../types/ShapeSet';\nimport { Node, Edge } from '../types/Shapes';\nimport { createShapeSet } from '../constructors/shapeSetConstructor';\nimport { createEdge } from '../constructors/shapeConstructors';\nimport { getClosestNeightboringNode } from './getClosestNeightboringNode';\nimport { rerouteEdges } from './rerouteEdges';\n\nconst connectNodes = async (\n  activeSetNodes: Node[],\n  inactiveSetNodes: Node[]\n): Promise<Edge[]> =>\n  await Promise.all(\n    activeSetNodes\n      .map(\n        async (item: Node, index, array): Promise<Edge[] | undefined> => {\n          const visited = array.slice(0, index);\n          if (visited.length > 0) {\n            const closestNeighboringNode = await getClosestNeightboringNode(\n              item,\n              createShapeSet(visited, 'active') as ShapeSetActive,\n              inactiveSetNodes\n            );\n\n            if (closestNeighboringNode) {\n              const testEdge = createEdge(\n                item.center,\n                closestNeighboringNode.center\n              );\n              const scannedEdges = (await rerouteEdges(\n                [testEdge],\n                inactiveSetNodes\n              )) as Edge[];\n              return scannedEdges;\n            }\n          }\n        }\n      )\n      .flat()\n  );\n\nexport default connectNodes;\n","import { ShapeSetBase, ShapeSetActive, ShapeSet } from '../types/ShapeSet';\nimport { Node } from '../types/Shapes';\nimport connectNodes from './connectNodes';\n\nconst getVirtualEdges = async (\n  activeSet: ShapeSet,\n  inactiveSet: ShapeSetBase\n) => {\n  if (!activeSet.nodes) return [];\n  if (!('getCenter' in activeSet)) return [];\n  activeSet.nodes.sort((a: Node, b: Node) =>\n    a.getDistanceToCenter!() < b.getDistanceToCenter!() ? -1 : 1\n  );\n\n  const scannedEdges = await connectNodes(activeSet.nodes, inactiveSet.nodes);\n  return scannedEdges;\n};\n\nexport default getVirtualEdges;\n","import { AreaDomainConstructor, AreaDomain } from '../types/Shapes';\n\nimport { ShapeSet } from '../types/ShapeSet';\n\nconst createAreaDomain: AreaDomainConstructor = async (\n  s: ShapeSet,\n  c: number\n): Promise<AreaDomain> => {\n  const range = await getRange(s);\n  const cellSize = c;\n  return {\n    cellSize: cellSize,\n    numOfCells: [\n      Math.ceil((range.xMax - range.xMin) / cellSize),\n      Math.ceil((range.yMax - range.yMin) / cellSize)\n    ],\n    boundary: range\n  };\n};\n\nconst getRange = async (set: ShapeSet) => {\n  const range = !set.edges\n    ? {\n        xMin: Math.min(...set.nodes.map(item => item.center.lng)),\n        xMax: Math.max(...set.nodes.map(item => item.center.lng)),\n        yMin: Math.min(...set.nodes.map(item => item.center.lat)),\n        yMax: Math.max(...set.nodes.map(item => item.center.lat))\n      }\n    : {\n        xMin: Math.min(\n          ...set.nodes.map(item => item.center.lng),\n          ...set.edges!.map(item => item.start.lng),\n          ...set.edges!.map(item => item.end.lng)\n        ),\n        xMax: Math.max(\n          ...set.nodes.map(item => item.center.lng),\n          ...set.edges!.map(item => item.start.lng),\n          ...set.edges!.map(item => item.end.lng)\n        ),\n        yMin: Math.min(\n          ...set.nodes.map(item => item.center.lat),\n          ...set.edges!.map(item => item.start.lat),\n          ...set.edges!.map(item => item.end.lat)\n        ),\n        yMax: Math.max(\n          ...set.nodes.map(item => item.center.lat),\n          ...set.edges!.map(item => item.start.lat),\n          ...set.edges!.map(item => item.end.lat)\n        )\n      };\n  const buffer = set.nodes.length > 0 ? set.nodes[0].radius : 0.025;\n  range.xMax += buffer * 3;\n  range.xMin -= buffer * 3;\n  range.yMax += buffer * 3;\n  range.yMin -= buffer * 3;\n  return range;\n};\n\nexport default createAreaDomain;\n","import { contours } from 'd3-contour';\nimport { ShapeSet } from '../types/ShapeSet';\n\nconst getPaths = async (\n  activeSet: ShapeSet,\n  threshold: number\n): Promise<number[][][][]> => {\n  const result = contours()\n    .size(activeSet.area!.domain.numOfCells)\n    .smooth(true)\n    .contour(Array.from(activeSet.area!.buffer) as number[], threshold);\n  return (result.coordinates as unknown) as number[][][][];\n};\nexport default getPaths;\n","import { ShapeSet } from '../types/ShapeSet';\nimport { polygonContains } from 'd3-polygon';\nimport { Point, Path } from '../types/Shapes';\n\nconst isAllContained = async (activeSet: ShapeSet, path: number[][][]) => {\n  return activeSet.nodes.reduce((prev, curr) => {\n    return path.reduce(\n      (prev2, curr2) =>\n        prev2 &&\n        polygonContains(curr2 as [number, number][], [\n          curr.center.lng,\n          curr.center.lat\n        ]),\n      true\n    );\n  }, true);\n};\n\nexport default isAllContained;\n","import { Node, Area, Edge } from '../types/Shapes';\nimport { createPoint, createNode } from '../constructors/shapeConstructors';\nexport const evaluateRepulsion = async (\n  potentialGrid: Area,\n  target: number[],\n  factor: number,\n  r: number,\n  element: Node | Edge\n): Promise<Area> => {\n  const domain = potentialGrid.domain;\n  target.map(async item => {\n    const curr = potentialGrid.buffer[item];\n    const [x, y] = [\n      item % domain.numOfCells[0],\n      Math.floor(item / domain.numOfCells[0])\n    ];\n    const position = potentialGrid.getPosition(x, y);\n    let distance;\n    if ('getDistanceToEdge' in element) {\n      distance = position.getDistance(element.center);\n    } else {\n      distance = createNode(\n        createPoint(position.lng, position.lat)\n      ).getDistanceToEdge(element as Edge);\n    }\n    if (distance < r) {\n      const dr = distance - r;\n      potentialGrid.buffer[item] = curr + factor * Math.pow(dr, 2);\n    } else {\n      potentialGrid.buffer[item] = curr;\n    }\n  });\n  return potentialGrid;\n};\n","import { ShapeSetBase, ShapeSet } from '../types/ShapeSet';\nimport { Area } from '../types/Shapes';\nimport { evaluateRepulsion } from './evaluateRepulsion';\n\nexport const fillPotentialGrid = async (\n  potentialGrid: Area,\n  activeSet: ShapeSet,\n  inactiveSet: ShapeSetBase,\n  parameter: [number, number],\n  factor: [number, number, number]\n) => {\n  if (!activeSet.edges) {\n    return;\n  }\n  const rDiff = parameter[1] - parameter[0];\n  const inverse = Math.pow(rDiff, 2);\n\n  activeSet.edges.map(async item => {\n    const target = item.getCorrespondingBuffer(potentialGrid, rDiff);\n    potentialGrid = await evaluateRepulsion(\n      potentialGrid,\n      target,\n      factor[1] / inverse,\n      parameter[1],\n      item\n    );\n  });\n  potentialGrid.buffer.map(item => item - Number.EPSILON);\n  activeSet.nodes.map(async item => {\n    const target = item.getCorrespondingBuffer(potentialGrid, rDiff);\n    potentialGrid = await evaluateRepulsion(\n      potentialGrid,\n      target,\n      factor[0] / inverse,\n      parameter[1],\n      item\n    );\n  });\n  inactiveSet.nodes.map(async item => {\n    const target = item.getCorrespondingBuffer(potentialGrid, rDiff);\n    potentialGrid = await evaluateRepulsion(\n      potentialGrid,\n      target,\n      factor[2] / inverse,\n      parameter[1],\n      item\n    );\n  });\n  return potentialGrid;\n};\n","import { ShapeSetBase, ShapeSetActive, ShapeSet } from '../types/ShapeSet';\nimport { Path } from '../types/Shapes';\nimport connectNodes from './connectNodes';\nimport createAreaDomain from '../constructors/areaDomainConstructor';\nimport {\n  createArea,\n  createPoint,\n  createPath\n} from '../constructors/shapeConstructors';\nimport getPaths from './getPaths';\nimport isAllContained from './isAllContained';\nimport { fillPotentialGrid } from './fillPotentialGrid';\n\nexport type Domain = {};\n\nconst getContour = async (\n  activeSet: ShapeSet,\n  inactiveSet: ShapeSetBase,\n  cellSize: number\n): Promise<Path[]> => {\n  const domain = await createAreaDomain(activeSet, cellSize);\n  const potentialGrid = createArea(domain);\n\n  const r0 = cellSize * 2;\n  const r1 = cellSize * 4;\n  let iteration = 0;\n  let threshold = 1;\n  const factorNode = 1;\n  const factorNodeNegative = -0.4;\n  const factorEdge = 1;\n\n  let path: number[][][] | undefined;\n  do {\n    activeSet.area = await fillPotentialGrid(\n      potentialGrid,\n      activeSet,\n      inactiveSet,\n      [r0, r1],\n      [factorNode, factorEdge, factorNodeNegative]\n    );\n    [path] = await getPaths(activeSet, threshold);\n    if (!path) continue;\n\n    threshold *= 0.9;\n    iteration += 1;\n  } while (!(await isAllContained(activeSet, path!)) && iteration < 1);\n\n  return path.map(item => {\n    return createPath(\n      item.map(item2 => {\n        const point = activeSet.area!.getPosition(item2[0], item2[1]);\n        return createPoint(point.lng, point.lat);\n      })\n    );\n  });\n};\n\nexport default getContour;\n","import { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\n\nexport const GET_ROOM = gql`\n  query GetRoom($id: Int) {\n    room(where: { id: $id }) {\n      id\n      name\n      recordType(orderBy: { id: asc }) {\n        id\n        name\n        active\n        color\n        record {\n          id\n          lat\n          lng\n          name\n          address\n        }\n      }\n    }\n  }\n`;\n\nconst GET_CURRENT_ROOM_ID = gql`\n  query {\n    session @client {\n      roomId\n      __typename\n    }\n  }\n`;\n\nexport const useCurrentRoom = () => {\n  const { data } = useQuery(GET_CURRENT_ROOM_ID);\n\n  return useRoom(data?.session.roomId);\n};\n\nexport const useRoom = (id?: number) => {\n  const { data } = useQuery(GET_ROOM, { variables: { id: id } });\n\n  return data ? data.room : undefined;\n};\n","import { useState, useEffect } from 'react';\nimport { RecordType } from './usePlotData';\nimport { useCurrentRoom } from './useRoom';\nimport { changeBusy } from './useBusy';\n\nconst useFilteredData = () => {\n  const [filtered, setFiltered] = useState<RecordType[]>([]);\n\n  const data = useCurrentRoom();\n\n  useEffect(() => {\n    if (data) {\n      setFiltered(\n        data.recordType.filter((item: { active: any }) => item.active)\n      );\n    }\n  }, [data]);\n\n  return filtered;\n};\n\nexport default useFilteredData;\n","import { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\n\nexport const GET_USER = gql`\n  query GetUser($id: Int) {\n    user(where: { id: $id }) {\n      id\n      name\n      setting {\n        cellSize\n        markSize\n        darkMode\n        scatter\n        edge\n        bubble\n        height\n      }\n    }\n  }\n`;\n\nconst GET_CURRENT_USER_ID = gql`\n  query {\n    session @client {\n      userId\n      __typename\n    }\n  }\n`;\n\nexport const useCurrentUser = () => {\n  const { data } = useQuery(GET_CURRENT_USER_ID);\n\n  return useUser(data?.session.userId);\n};\n\nexport const useUser = (id?: number) => {\n  const { data } = useQuery(GET_USER, { variables: { id: id } });\n\n  return data ? data.user : undefined;\n};\n","import { gql, ApolloClient, NormalizedCache } from 'apollo-boost';\nimport { useState, useEffect } from 'react';\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\n\nconst GET_BUSY = gql`\n  query {\n    session @client {\n      editMode\n      computing\n      modifying\n      loaded\n    }\n  }\n`;\n\nconst useBusy = (type: string) => {\n  const { data } = useQuery(GET_BUSY);\n  const [state, setState] = useState(false);\n\n  useEffect(() => {\n    if (data) {\n      setState(data.session[type]);\n    }\n  }, [data]);\n\n  return state;\n};\n\nexport const changeBusy = (\n  type: string,\n  changeTo: boolean,\n  client: ApolloClient<object>\n) => {\n  const { session } = client.readQuery<any>({ query: GET_BUSY });\n  client.writeQuery({\n    query: GET_BUSY,\n    data: {\n      session: {\n        ...session,\n        [type]: changeTo\n      }\n    }\n  });\n};\n\nexport default useBusy;\n","import { useState, useEffect } from 'react';\nimport getVirtualEdges from '../utils/getVirtualEdges';\nimport { createShapeSet } from '../constructors/shapeSetConstructor';\nimport getContour from '../utils/getContour';\nimport { createNode, createPoint } from '../constructors/shapeConstructors';\nimport { RGBAColor } from 'deck.gl';\nimport { RecordType, Records } from './usePlotData';\nimport useFilteredData from './useFilteredData';\nimport { useCurrentUser } from './useUser';\nimport useBusy from './useBusy';\n\ntype Contours = {\n  contour: [number, number][];\n  color: RGBAColor;\n}[];\ntype Edges = {\n  start: [number, number, number];\n  end: [number, number, number];\n  color: RGBAColor;\n}[];\n\nexport type ContoursEdges = {\n  contours?: Contours;\n  edges?: Edges;\n};\n\nconst useContoursEdges = (): ContoursEdges => {\n  const recordTypes = useFilteredData();\n  const user = useCurrentUser();\n  const isModifying = useBusy('modifying');\n  const [contoursEdges, setContoursEdges] = useState<ContoursEdges>({\n    contours: undefined,\n    edges: undefined\n  });\n\n  useEffect(() => {\n    const f = async () => {\n      if (!recordTypes || !user) {\n        return;\n      }\n      const newContoursEdges = await Promise.all(\n        recordTypes.map(\n          async (\n            item: RecordType,\n            _index: number,\n            array: RecordType[]\n          ): Promise<[Contours, Edges]> => {\n            const activeSet = createShapeSet(\n              item.record.map((item: Records[0]) =>\n                createNode(\n                  createPoint(item.lng, item.lat),\n                  user.setting.markSize\n                )\n              ),\n              'active'\n            );\n\n            if (activeSet.nodes.length === 0) {\n              return [[], []];\n            }\n\n            const inactiveSet = createShapeSet(\n              array\n                .filter((item2: RecordType) => item2.name !== item.name)\n                .map(item => item.record)\n                .flat()\n                .map((item: Records[0]) =>\n                  createNode(\n                    createPoint(item.lng, item.lat),\n                    user.setting.markSize\n                  )\n                ),\n              'base'\n            );\n\n            activeSet.edges = (await getVirtualEdges(activeSet, inactiveSet))\n              .flat()\n              .filter(item => item !== undefined);\n\n            const contour = await getContour(\n              activeSet,\n              inactiveSet,\n              user.setting.cellSize * (isModifying ? 2 : 1)\n            );\n\n            return [\n              contour.map(item2 => ({\n                contour: item2.getCoordinates(),\n                color: [...item.color, 30] as RGBAColor\n              })),\n              activeSet.edges.map(edge => ({\n                start: [edge.start.lng, edge.start.lat, 0],\n                end: [edge.end.lng, edge.end.lat, 0],\n                color: item.color\n              }))\n            ];\n          }\n        )\n      );\n      setContoursEdges({\n        contours: newContoursEdges.flatMap(item => item[0]),\n        edges: newContoursEdges.map(item => item[1]).flat(1)\n      });\n    };\n\n    if (recordTypes) {\n      f();\n    }\n  }, [recordTypes, user, isModifying]);\n\n  return contoursEdges;\n};\n\nexport default useContoursEdges;\n","import { RGBAColor } from 'deck.gl';\nimport { RecordType } from './usePlotData';\nimport { useState, useEffect } from 'react';\nimport useFilteredData from './useFilteredData';\n\ntype Feature = {\n  type: string;\n  properties: {\n    id: number;\n    fillColor: RGBAColor;\n    markSize: string;\n  };\n  geometry: {\n    type: string;\n    coordinates: [number, number];\n  };\n};\n\nexport type Scatters = {\n  type: string;\n  features?: Feature[];\n};\n\nconst useScatters = (): Scatters | undefined => {\n  const recordTypes = useFilteredData();\n  const [scatters, setScatters] = useState<Scatters | undefined>(undefined);\n\n  useEffect(() => {\n    const f = async () => {\n      if (!recordTypes) {\n        return;\n      }\n      const newRecordTypes = recordTypes\n        .map((item, index) =>\n          item.record.map(record => ({\n            type: 'Feature',\n            properties: {\n              id: record.id,\n              fillColor: item.color,\n              type: item.name,\n              typeId: item.id,\n              name: record.name,\n              address: record.address\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: [record.lng, record.lat]\n            }\n          }))\n        )\n        .flat(2);\n      setScatters({\n        type: 'FeatureCollection',\n        features: newRecordTypes\n      });\n    };\n    if (recordTypes) {\n      f();\n    }\n  }, [recordTypes]);\n\n  return scatters;\n};\n\nexport default useScatters;\n","import useContoursEdges, { ContoursEdges } from './useContoursEdges';\nimport { useState, useEffect } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\nimport useScatters, { Scatters } from './useScatters';\nimport { useCurrentRoom } from './useRoom';\nimport { changeBusy } from './useBusy';\nimport useFilteredData from './useFilteredData';\n\ntype PlotData = ContoursEdges & {\n  scatters?: Scatters;\n};\n\nexport type RecordType = {\n  id: number;\n  record: Records;\n  name: string;\n  color: [number, number, number];\n  active: boolean;\n};\n\nexport type Records = {\n  id: number;\n  lng: number;\n  lat: number;\n  name: string;\n  address: string;\n}[];\n\nconst usePlotData = (): PlotData => {\n  const client = useApolloClient();\n  const [plotData, setPlotData] = useState<PlotData>({});\n\n  const contoursEdges = useContoursEdges();\n  const scatters = useScatters();\n\n  useEffect(() => {\n    setPlotData({\n      contours: contoursEdges.contours,\n      edges: contoursEdges.edges,\n      scatters: scatters\n    });\n    changeBusy('computing', false, client);\n  }, [contoursEdges, scatters]);\n\n  return plotData;\n};\n\nexport default usePlotData;\n","const getIcon: { [name: string]: string } = {\n  foodMarket: 'store',\n  busStop: 'directionsBus',\n  restaurant: 'restaurantMenu',\n  medicalClinic: 'hotel'\n};\n\nexport default getIcon;\n","import React, { Dispatch, SetStateAction } from 'react';\nimport {\n  Card,\n  Grid,\n  Typography,\n  ButtonBase,\n  Divider,\n  Icon\n} from '@material-ui/core';\nimport getIcon from '../../utils/getIcon';\nimport camelcase from 'camelcase';\nimport { HighlightOff } from '@material-ui/icons';\nimport { gql } from 'apollo-boost';\nimport { useCurrentRoom, GET_ROOM } from '../../uses/useRoom';\nimport { useMutation } from '@apollo/react-hooks';\n\nexport type ToolTipProps = {\n  id: number;\n  type: string;\n  name: string;\n  address: string;\n  x: number;\n  y: number;\n  setTooltip: Dispatch<SetStateAction<ToolTipProps | undefined>>;\n};\n\nexport const DELETE_RECORD = gql`\n  mutation DeleteRecord($where: RecordWhereUniqueInput!) {\n    deleteOneRecord(where: $where) {\n      id\n      name\n      lat\n      lng\n      address\n    }\n  }\n`;\n\nconst ToolTip: React.FC<ToolTipProps> = (props: ToolTipProps) => {\n  const currentRoom = useCurrentRoom();\n  const [mutation] = useMutation(DELETE_RECORD, {\n    update: (cache, { data: { deleteOneRecord } }) => {\n      const { room } = cache.readQuery<any>({\n        query: GET_ROOM,\n        variables: { id: currentRoom.id }\n      });\n\n      const typeIndex = room.recordType.findIndex(\n        (item: any) => item.name === props.type\n      );\n\n      const newRoom = {\n        ...room,\n        recordType: [\n          ...room.recordType.filter(\n            (item: any, index: any) => index !== typeIndex\n          ),\n          {\n            ...room.recordType[typeIndex],\n            record: room.recordType[typeIndex].record\n              .filter((item: { id: number }) => item.id !== props.id)\n              .sort((a: { id: number }, b: { id: number }) =>\n                a.id < b.id ? -1 : 1\n              )\n          }\n        ].sort((a, b) => (a.id < b.id ? -1 : 1))\n      };\n\n      cache.writeQuery({\n        query: GET_ROOM,\n        variables: {\n          id: currentRoom.id\n        },\n        data: {\n          room: newRoom\n        }\n      });\n    }\n  });\n\n  const onClick = () => {\n    mutation({\n      variables: {\n        where: {\n          id: props.id\n        }\n      }\n    });\n    props.setTooltip(undefined);\n  };\n\n  if (!props.name) return null;\n  return (\n    <Card\n      style={{\n        maxWidth: '20rem',\n        position: 'absolute',\n        zIndex: 7,\n        top: props.y,\n        left: props.x\n      }}\n    >\n      <Grid\n        container\n        item\n        xs={12}\n        style={{\n          padding: '0.3rem'\n        }}\n      >\n        <Grid container item xs={2} alignItems={'center'} justify={'center'}>\n          <Icon>{getIcon[camelcase(props.type)] || 'place'}</Icon>\n        </Grid>\n        <Grid container item xs={9} alignItems={'center'}>\n          <Typography variant={'h6'}>{props.name}</Typography>\n        </Grid>\n        <Grid container item xs={1} alignItems={'center'}>\n          <ButtonBase onClick={onClick}>\n            <HighlightOff color={'error'} />\n          </ButtonBase>\n        </Grid>\n      </Grid>\n      <Divider />\n      <Grid\n        container\n        item\n        xs={12}\n        style={{\n          padding: '0.3rem'\n        }}\n      >\n        <Typography variant={'body1'}>{props.address}</Typography>\n      </Grid>\n    </Card>\n  );\n};\n\nexport default ToolTip;\n","import { ApolloClient, gql } from 'apollo-boost';\nimport { GET_ROOM, useCurrentRoom } from '../uses/useRoom';\nimport { DragRotateHandler } from 'mapbox-gl';\n\ntype UpdateVisData = {\n  roomId: number;\n  id: number;\n  type: string;\n  lat: number;\n  lng: number;\n};\n\nconst updateVis = (data: UpdateVisData, client: ApolloClient<object>) => {\n  const { room } = client.readQuery<any>({\n    query: GET_ROOM,\n    variables: { id: data.roomId }\n  });\n  const typeIndex = room.recordType.findIndex(\n    (item: any) => item.name === data.type\n  );\n  const recordIndex = room.recordType[typeIndex].record.findIndex(\n    (item: any) => item.id === data.id\n  );\n\n  const newElement = {\n    ...room.recordType[typeIndex].record[recordIndex],\n    lat: data.lat,\n    lng: data.lng\n  };\n\n  const newRoom = {\n    ...room,\n    recordType: [\n      ...room.recordType.filter((item: any, index: any) => index !== typeIndex),\n      {\n        ...room.recordType[typeIndex],\n        record: [\n          ...room.recordType[typeIndex].record.filter(\n            (item: any, index: any) => index !== recordIndex\n          ),\n          newElement\n        ].sort((a, b) => (a.id < b.id ? -1 : 1))\n      }\n    ].sort((a, b) => (a.id < b.id ? -1 : 1))\n  };\n\n  client.writeQuery({\n    query: GET_ROOM,\n    data: {\n      room: newRoom\n    }\n  });\n};\n\nexport default updateVis;\n","import React, { SetStateAction, Dispatch } from 'react';\nimport {\n  Card,\n  Grid,\n  Typography,\n  Icon,\n  Divider,\n  TextField,\n  Select,\n  MenuItem,\n  Button\n} from '@material-ui/core';\nimport camelcase from 'camelcase';\nimport { useCurrentRoom, GET_ROOM } from '../../uses/useRoom';\nimport { ToolTipProps } from './ToolTip';\nimport { gql } from 'apollo-boost';\nimport { useMutation } from '@apollo/react-hooks';\n\nexport type AddRecordToolTipProps = {\n  address: string;\n  x: number;\n  y: number;\n  lat: number;\n  lng: number;\n  setAddRecordTooltip: Dispatch<\n    SetStateAction<AddRecordToolTipProps | undefined>\n  >;\n};\n\nexport const CREATE_RECORD = gql`\n  mutation CreateRecord($newData: RecordCreateInput!) {\n    createOneRecord(data: $newData) {\n      id\n      name\n      lat\n      lng\n      address\n    }\n  }\n`;\n\nconst AddRecordToolTip: React.FC<AddRecordToolTipProps> = (\n  props: AddRecordToolTipProps\n) => {\n  const currentRoom = useCurrentRoom();\n  const [mutation] = useMutation(CREATE_RECORD, {\n    update: (cache, { data: { createOneRecord } }) => {\n      const { room } = cache.readQuery<any>({\n        query: GET_ROOM,\n        variables: { id: currentRoom.id }\n      });\n\n      const typeIndex = room.recordType.findIndex(\n        (item: any) => item.name === type\n      );\n      console.log(type);\n      console.log(room.recordType);\n      const newRecord = {\n        ...createOneRecord,\n        type: { connect: { id: room.recordType[typeIndex].id } }\n      };\n\n      const newRoom = {\n        ...room,\n        recordType: [\n          ...room.recordType.filter(\n            (item: any, index: any) => index !== typeIndex\n          ),\n          {\n            ...room.recordType[typeIndex],\n            record: [\n              ...room.recordType[typeIndex].record,\n              newRecord\n            ].sort((a, b) => (a.id < b.id ? -1 : 1))\n          }\n        ].sort((a, b) => (a.id < b.id ? -1 : 1))\n      };\n\n      cache.writeQuery({\n        query: GET_ROOM,\n        variables: {\n          id: currentRoom.id\n        },\n        data: {\n          room: newRoom\n        }\n      });\n    }\n  });\n  const [type, setType] = React.useState('');\n  const [name, setName] = React.useState('');\n  if (!props.address || !currentRoom) return null;\n\n  const options = currentRoom?.recordType.map((item: any) => ({\n    value: item.name\n  }));\n\n  if (!options) return null;\n\n  const onChangeInput = (event: any) => {\n    setName(event.target.value);\n  };\n  const onChangeSelect = (event: any) => {\n    setType(event.target.value);\n  };\n\n  const addRecord = () => {\n    const typeInstance = currentRoom?.recordType.find(\n      (item: any) => item.name === type\n    );\n    if (!typeInstance) return;\n    const newRecord = {\n      address: props.address,\n      lat: props.lat,\n      lng: props.lng,\n      name: name,\n      type: { connect: { id: typeInstance.id } }\n    };\n    mutation({\n      variables: {\n        newData: newRecord\n      }\n    });\n    props.setAddRecordTooltip(undefined);\n    setName('');\n  };\n\n  return (\n    <Card\n      style={{\n        width: '15rem',\n        position: 'absolute',\n        zIndex: 700,\n        top: props.y,\n        left: props.x\n      }}\n    >\n      <Grid container item xs={12}>\n        <Grid\n          container\n          item\n          xs={10}\n          alignItems={'center'}\n          style={{\n            padding: '0.3rem'\n          }}\n        >\n          <TextField\n            style={{\n              width: '15rem'\n            }}\n            label=\"Add Record\"\n            value={name}\n            onChange={onChangeInput}\n          />\n        </Grid>\n      </Grid>\n      <Divider />\n      <Grid\n        container\n        item\n        xs={12}\n        style={{\n          padding: '0.3rem'\n        }}\n      >\n        <TextField\n          select\n          label=\"Select Type\"\n          value={type}\n          onChange={onChangeSelect}\n          style={{\n            width: '15rem'\n          }}\n        >\n          {options.map((option: any) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.value}\n            </MenuItem>\n          ))}\n        </TextField>\n      </Grid>\n      <Grid\n        container\n        item\n        xs={12}\n        justify={'flex-end'}\n        style={{\n          padding: '0.3rem'\n        }}\n      >\n        <Button\n          color={'primary'}\n          onClick={() => props.setAddRecordTooltip(undefined)}\n        >\n          Cancel\n        </Button>\n        <Button color={'primary'} onClick={addRecord}>\n          Add\n        </Button>\n      </Grid>\n    </Card>\n  );\n};\n\nexport default AddRecordToolTip;\n","import maps from '@google/maps';\n\nconst initializeGeocoder = (apiKey: string) => {\n  const geocoder = maps.createClient({\n    key: apiKey,\n    Promise: Promise\n  });\n\n  return geocoder;\n};\n\nexport default initializeGeocoder;\n","import React, { useState, useEffect } from 'react';\nimport DeckGL from '@deck.gl/react';\nimport ReactMapGL, { Layer } from 'react-map-gl';\n\nimport { PolygonLayer, LineLayer } from 'deck.gl';\nimport { useWindowSize } from 'react-use';\nimport usePlotData from '../../uses/usePlotData';\nimport { useCurrentUser } from '../../uses/useUser';\nimport { useApolloClient, useMutation } from '@apollo/react-hooks';\nimport { EditableGeoJsonLayer, TranslateMode } from 'nebula.gl';\nimport { Scatters } from '../../uses/useScatters';\nimport useBusy, { changeBusy } from '../../uses/useBusy';\nimport ToolTip, { ToolTipProps } from '../molecules/ToolTip';\nimport updateVis from '../../utils/updateVis';\nimport { useCurrentRoom } from '../../uses/useRoom';\nimport AddRecordToolTip, {\n  AddRecordToolTipProps\n} from '../molecules/AddRecordToolTip';\nimport initializeGeocoder from '../../utils/geocoder';\nimport { gql } from 'apollo-boost';\n\nexport type MapProps = {\n  viewState: {\n    longitude: number;\n    latitude: number;\n    zoom: number;\n    pitch: number;\n    bearing: number;\n  };\n};\n\nexport const UPDATE_RECORD_TYPE = gql`\n  mutation UpdateRecord($newData: RecordUpdateInput!, $id: Int!) {\n    updateOneRecord(data: $newData, where: { id: $id }) {\n      id\n      name\n      address\n      lat\n      lng\n      type {\n        id\n      }\n    }\n  }\n`;\n\nconst MAPBOX_TOKEN =\n  'pk.eyJ1Ijoia2VtYWtpbm8iLCJhIjoiY2s1aHJkeWVpMDZzbDNubzltem80MGdnZSJ9.Mn_8DItICHFJyiPJ2rP_0Q';\n\nconst Map = (props: MapProps) => {\n  const plotData = usePlotData();\n  const [scatters, setScatters] = useState<Scatters | undefined>(undefined);\n  const [selected, setSelected] = useState(-1);\n  const [addRecordTooltip, setAddRecordTooltip] = useState<\n    AddRecordToolTipProps\n  >();\n  const [mutation] = useMutation(UPDATE_RECORD_TYPE);\n  const [tooltip, setTooltip] = useState<ToolTipProps>();\n  const user = useCurrentUser();\n  const room = useCurrentRoom();\n  const geocoder = initializeGeocoder(\n    'AIzaSyDYpfr3G1zc2VXFr-YmdGWDuMuWUtPWimY'\n  );\n\n  const client = useApolloClient();\n  const editMode = useBusy('editMode');\n  const isModifying = useBusy('modifying');\n  const isComputing = useBusy('computing');\n\n  const window = useWindowSize();\n\n  const [view, setView] = React.useState(props.viewState);\n\n  useEffect(() => {\n    setScatters(plotData?.scatters);\n  }, [plotData]);\n\n  useEffect(() => {\n    if (editMode === false) {\n      setSelected(-1);\n    }\n  }, [editMode]);\n\n  const layer = [\n    user?.setting.bubble\n      ? new PolygonLayer({\n          id: 'polygonLayer',\n          data: plotData.contours!,\n          extruded: false,\n          stroked: true,\n          getPolygon: (d: { contour: any }) => d.contour,\n          getFillColor: (d: { color: any }) => d.color\n        })\n      : undefined,\n    user?.setting.edge\n      ? new LineLayer({\n          id: 'lineLayer',\n          data: plotData.edges!,\n          getSourcePosition: (d: { start: any }) => d.start,\n          getTargetPosition: (d: { end: any }) => d.end,\n          getColor: (d: { color: any }) => d.color\n        })\n      : undefined,\n    user?.setting.scatter\n      ? new EditableGeoJsonLayer({\n          id: 'geojsonLayer',\n          data: scatters,\n          mode: TranslateMode,\n          selectedFeatureIndexes: [selected],\n          filled: true,\n          stroked: true,\n          getLineWidth: 5 / Math.log(view.zoom),\n          getRadius: user?.setting.markSize * 25000 || 40,\n          getFillColor: (d: any) =>\n            d.properties.fillColor\n              ? d.properties.fillColor\n              : [125, 255, 255, 255],\n          pickable: true,\n          onEdit: ({ updatedData, editType }: any) => {\n            if (editType === 'translating' && !isModifying) {\n              changeBusy('modifying', true, client);\n            }\n            if (!isComputing) {\n              const record = updatedData.features[selected];\n              updateVis(\n                {\n                  roomId: room.id,\n                  id: record.properties.id,\n                  type: record.properties.type,\n                  lat: record.geometry.coordinates[1],\n                  lng: record.geometry.coordinates[0]\n                },\n                client\n              );\n            }\n            if (editType === 'translated') {\n              changeBusy('modifying', false, client);\n              const record = updatedData.features[selected];\n              geocoder.reverseGeocode(\n                {\n                  latlng: {\n                    lat: record.geometry.coordinates[1],\n                    lng: record.geometry.coordinates[0]\n                  }\n                },\n                (error: any, result: any) => {\n                  mutation({\n                    variables: {\n                      newData: {\n                        lat: record.geometry.coordinates[1],\n                        lng: record.geometry.coordinates[0],\n                        name: record.properties.name,\n                        address: record.properties.address,\n                        type: { connect: { id: record.properties.typeId } }\n                      },\n                      id: record.properties.id\n                    }\n                  });\n                }\n              );\n            }\n            setScatters(updatedData);\n          }\n        })\n      : undefined\n  ].filter(item => item !== undefined) as any[];\n\n  const background = (\n    <ReactMapGL\n      mapboxApiAccessToken={MAPBOX_TOKEN}\n      width={window.width}\n      height={window.height}\n      mapStyle={\n        user\n          ? user.setting.darkMode\n            ? 'mapbox://styles/mapbox/dark-v10'\n            : 'mapbox://styles/mapbox/light-v10'\n          : 'mapbox://styles/mapbox/light-v10'\n      }\n    >\n      <Layer\n        id={'height'}\n        type={'fill-extrusion'}\n        source={'composite'}\n        source-layer={'building'}\n        paint={{\n          'fill-extrusion-color': '#aaa',\n          'fill-extrusion-height': [\n            'interpolate',\n            ['linear'],\n            ['zoom'],\n            15,\n            0,\n            15.05,\n            ['get', 'height']\n          ],\n          'fill-extrusion-base': [\n            'interpolate',\n            ['linear'],\n            ['zoom'],\n            15,\n            0,\n            15.05,\n            ['get', 'min_height']\n          ],\n          'fill-extrusion-opacity': 0.6\n        }}\n      />\n    </ReactMapGL>\n  );\n\n  return (\n    <>\n      <ToolTip {...(tooltip as ToolTipProps)} />\n      <AddRecordToolTip {...(addRecordTooltip as AddRecordToolTipProps)} />\n      <DeckGL\n        width={window.width}\n        height={window.height}\n        viewState={view}\n        layers={layer}\n        getCursor={() => (editMode ? 'crosshair' : 'pointer')}\n        onClick={\n          editMode\n            ? (info: any) => {\n                setSelected(info.index);\n                if (info.index === -1 && !addRecordTooltip) {\n                  geocoder.reverseGeocode(\n                    {\n                      latlng: {\n                        lat: info.coordinate[1],\n                        lng: info.coordinate[0]\n                      }\n                    },\n                    (error: any, result: any) => {\n                      setAddRecordTooltip({\n                        address: result.json.results[0].formatted_address,\n                        x: info.x + 16,\n                        y: info.y + 16,\n                        lat: info.coordinate[1],\n                        lng: info.coordinate[0],\n                        setAddRecordTooltip: setAddRecordTooltip\n                      });\n                    }\n                  );\n                }\n              }\n            : (info: any) => {\n                setAddRecordTooltip(undefined);\n                if (info.object?.properties?.type) {\n                  setTooltip({\n                    id: info.object.properties.id,\n                    type: info.object.properties.type,\n                    name: info.object.properties.name,\n                    address: info.object.properties.address,\n                    x: info.x + 16,\n                    y: info.y + 16,\n                    setTooltip: setTooltip\n                  });\n                } else {\n                  setTooltip(undefined);\n                }\n              }\n        }\n        onDragStart={() => setTooltip(undefined)}\n        controller={!editMode && true}\n        onViewStateChange={({ viewState }) => setView(viewState)}\n      >\n        {background}\n      </DeckGL>\n    </>\n  );\n};\n\nexport default Map;\n","import React, { useState, useEffect } from 'react';\nimport { Grid } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\n\nimport Switch from '@material-ui/core/Switch';\nimport { gql } from 'apollo-boost';\nimport { useMutation } from '@apollo/react-hooks';\nimport { useCurrentUser, GET_USER } from '../../uses/useUser';\nimport camelcase from 'camelcase';\n\nexport type ToggleLabelProps = { label: string };\n\nexport const UPDATE_USER = gql`\n  mutation UpdateUser($newData: UserUpdateInput!, $id: Int!) {\n    updateOneUser(data: $newData, where: { id: $id }) {\n      id\n      name\n      setting {\n        darkMode\n        cellSize\n        markSize\n        scatter\n        edge\n        bubble\n      }\n    }\n  }\n`;\n\nconst ToggleLabel: React.FC<ToggleLabelProps> = (props: ToggleLabelProps) => {\n  const user = useCurrentUser();\n  const [status, setStatus] = useState<[boolean, boolean]>([false, false]);\n  const [mutation] = useMutation(UPDATE_USER);\n\n  useEffect(() => {\n    if (user) {\n      setStatus([user.setting[camelcase(props.label)], true]);\n    }\n  }, [user]);\n\n  const onChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    checked: boolean\n  ) => {\n    setStatus([checked, false]);\n    mutation({\n      variables: {\n        newData: { setting: { update: { [camelcase(props.label)]: checked } } },\n        id: user.id\n      }\n    });\n  };\n\n  return (\n    <Grid\n      container\n      item\n      xs={12}\n      style={{ height: '3rem' }}\n      alignItems={'center'}\n    >\n      <Grid item xs={10}>\n        <Typography variant=\"body1\">{props.label}</Typography>\n      </Grid>\n      <Grid item xs={2}>\n        <Switch checked={status[0]} disabled={!status[1]} onChange={onChange} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default ToggleLabel;\n","import React, { useState, useEffect, ChangeEvent } from 'react';\nimport { Grid } from '@material-ui/core';\n\nimport Typography from '@material-ui/core/Typography';\nimport { Slider as SliderMUI } from '@material-ui/core';\nimport { useCurrentUser } from '../../uses/useUser';\nimport { useMutation } from '@apollo/react-hooks';\nimport { UPDATE_USER } from './ToggleLabel';\nimport camelcase from 'camelcase';\n\nexport type SliderLabelProps = { label: string };\n\nconst SliderLabel: React.FC<SliderLabelProps> = (props: SliderLabelProps) => {\n  const user = useCurrentUser();\n  const [status, setStatus] = useState<[number, boolean]>([0, false]);\n  const [mutation] = useMutation(UPDATE_USER);\n\n  useEffect(() => {\n    if (user) {\n      setStatus([user.setting[camelcase(props.label)], true]);\n    }\n  }, [user]);\n\n  const onChange = (event: ChangeEvent<{}>, value: number | number[]) => {\n    setStatus([value as number, true]);\n  };\n\n  const onChangeCommitted = (\n    event: ChangeEvent<{}>,\n    value: number | number[]\n  ) => {\n    setStatus([value as number, false]);\n    mutation({\n      variables: {\n        newData: { setting: { update: { [camelcase(props.label)]: value } } },\n        id: user.id\n      }\n    });\n  };\n\n  const range =\n    props.label === 'Mark Size'\n      ? { max: 0.008, min: 0.0005, step: 0.0005 }\n      : { max: 0.002, min: 0.00025, step: 0.00025 };\n\n  return (\n    <Grid\n      container\n      item\n      xs={12}\n      style={{ height: '3rem' }}\n      alignItems={'center'}\n    >\n      <Grid xs={4}>\n        <Typography variant={'body1'}>{props.label}</Typography>\n      </Grid>\n      <Grid xs={8}>\n        <SliderMUI\n          value={status[0]}\n          disabled={!status[1]}\n          valueLabelDisplay={'auto'}\n          onChange={onChange}\n          onChangeCommitted={onChangeCommitted}\n          {...range}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default SliderLabel;\n","import React from 'react';\nimport SliderLabel, { SliderLabelProps } from '../atoms/SliderLabel';\nimport { Grid, Typography } from '@material-ui/core';\nimport ToggleLabel, { ToggleLabelProps } from '../atoms/ToggleLabel';\nimport { Theme, createStyles } from '@material-ui/core/styles';\nimport Divider from '@material-ui/core/Divider';\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport type ControlPanelProps = {\n  title: string;\n  sliderArray: SliderLabelProps[];\n  toggleArray: ToggleLabelProps[];\n};\n\nconst ControlPanel: React.FC<ControlPanelProps> = (\n  props: ControlPanelProps\n) => {\n  return (\n    <Grid style={{ paddingTop: '2rem' }}>\n      <Typography variant=\"h6\">{props.title}</Typography>\n      <Divider />\n      {props.sliderArray.map(item => (\n        <SliderLabel label={item.label}></SliderLabel>\n      ))}\n      {props.toggleArray.map(item => (\n        <ToggleLabel label={item.label} />\n      ))}\n    </Grid>\n  );\n};\n\nexport default ControlPanel;\n","import React, { ChangeEvent, useState, useEffect } from 'react';\nimport {\n  Grid,\n  Checkbox,\n  Icon,\n  Typography,\n  useTheme,\n  ButtonBase\n} from '@material-ui/core';\nimport { gql } from 'apollo-boost';\nimport { useMutation } from '@apollo/react-hooks';\nimport { GET_ROOM, useCurrentRoom } from '../../uses/useRoom';\nimport { rgb, hsl } from 'color-convert';\nimport useBusy from '../../uses/useBusy';\nimport { useCurrentUser } from '../../uses/useUser';\nimport { HighlightOff } from '@material-ui/icons';\n\nexport type TypeLabelProps = {\n  id: number;\n  icon: string;\n  label: string;\n  color?: number[];\n  active: boolean;\n  canDelete: boolean;\n};\n\nexport const UPDATE_RECORD_TYPE = gql`\n  mutation UpdateBoolean($newData: RecordTypeUpdateInput!, $id: Int!) {\n    updateOneRecordType(data: $newData, where: { id: $id }) {\n      id\n      name\n      color\n      active\n    }\n  }\n`;\n\nexport const DELETE_RECORD_TYPE = gql`\n  mutation DeleteRecordType($where: RecordTypeWhereUniqueInput!) {\n    deleteOneRecordType(where: $where) {\n      id\n    }\n  }\n`;\n\nconst TypeLabel: React.FC<TypeLabelProps> = (props: TypeLabelProps) => {\n  const user = useCurrentUser();\n  const currentRoom = useCurrentRoom();\n  const [updateRecordType] = useMutation(UPDATE_RECORD_TYPE, {\n    update: (cache, { data: { updateOneRecordType } }) => {\n      const { room } = cache.readQuery<any>({\n        query: GET_ROOM,\n        variables: { id: currentRoom.id }\n      });\n      cache.writeQuery({\n        query: GET_ROOM,\n        data: {\n          room: {\n            ...room,\n            recordType: [\n              ...room.recordType.filter(\n                (item: any) => item.id !== updateOneRecordType.id\n              ),\n              updateOneRecordType\n            ].sort((a, b) => (a.id < b.id ? -1 : 1))\n          }\n        }\n      });\n    }\n  });\n  const [deleteRecordType] = useMutation(DELETE_RECORD_TYPE, {\n    update: (cache, { data: { deleteOneRecordType } }) => {\n      const { room } = cache.readQuery<any>({\n        query: GET_ROOM,\n        variables: { id: currentRoom.id }\n      });\n      cache.writeQuery({\n        query: GET_ROOM,\n        data: {\n          room: {\n            ...room,\n            recordType: [\n              ...room.recordType.filter(\n                (item: any) => item.id !== deleteOneRecordType.id\n              )\n            ].sort((a, b) => (a.id < b.id ? -1 : 1))\n          }\n        }\n      });\n    }\n  });\n  const [status, setStatus] = useState<[boolean, boolean]>([false, false]);\n\n  useEffect(() => {\n    if (props) {\n      setStatus([props.active, true]);\n    }\n  }, [props]);\n\n  const onChange = (event: ChangeEvent<HTMLInputElement>, checked: boolean) => {\n    setStatus([checked, false]);\n    updateRecordType({\n      variables: {\n        newData: { active: checked },\n        id: props.id\n      }\n    });\n  };\n\n  const color = props.color\n    ? '#' +\n      hsl.hex(\n        rgb\n          .hsl(props.color)\n          .map((item: number, index: number) =>\n            index === 2 ? item - 10 * (user?.setting.darkMode ? -1 : 1) : item\n          )\n      )\n    : '#aaaaaa';\n\n  const onClick = () => {\n    deleteRecordType({\n      variables: {\n        where: { id: props.id }\n      }\n    });\n  };\n\n  return (\n    <Grid\n      style={{\n        height: '3rem',\n        color: color\n      }}\n      container\n      item\n      xs={12}\n    >\n      <Grid container item xs={2} alignItems={'center'}>\n        <Icon>{props.icon || 'place'}</Icon>\n      </Grid>\n      <Grid\n        container\n        item\n        xs={10}\n        justify={'space-between'}\n        alignItems={'center'}\n      >\n        <Typography variant={'body1'}>{props.label}</Typography>\n        <Grid item>\n          <Checkbox\n            style={{\n              color: color\n            }}\n            checked={status[0]}\n            disabled={!status[1]}\n            onChange={onChange}\n          />\n          {props.icon === undefined && props.canDelete === true ? (\n            <ButtonBase onClick={onClick} style={{ padding: '9px 9px 9px 0' }}>\n              <HighlightOff color={'error'} />\n            </ButtonBase>\n          ) : null}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default TypeLabel;\n","import React, { useState } from 'react';\nimport { Add, KeyboardArrowDown, Done } from '@material-ui/icons';\nimport {\n  Grid,\n  Typography,\n  Checkbox,\n  useTheme,\n  TextField,\n  IconButton\n} from '@material-ui/core';\nimport { useCurrentRoom, GET_ROOM } from '../../uses/useRoom';\nimport { useMutation } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\nexport type AddTypeProps = {};\n\nexport const CREATE_RECORD_TYPE = gql`\n  mutation CreateRecordType($newData: RecordTypeCreateInput!) {\n    createOneRecordType(data: $newData) {\n      id\n      name\n      active\n      color\n      record {\n        id\n        name\n        lat\n        lng\n        address\n      }\n    }\n  }\n`;\n\nconst AddType: React.FC<AddTypeProps> = (props: AddTypeProps) => {\n  const theme = useTheme();\n  const currentRoom = useCurrentRoom();\n  const [name, setName] = useState<string>('');\n  const [mutation] = useMutation(CREATE_RECORD_TYPE, {\n    update: (cache, { data: { createOneRecordType } }) => {\n      console.log(createOneRecordType);\n      const { room } = cache.readQuery<any>({\n        query: GET_ROOM,\n        variables: { id: currentRoom.id }\n      });\n      console.log(\n        [...room.recordType, createOneRecordType].sort((a, b) =>\n          a.id < b.id ? -1 : 1\n        )\n      );\n      cache.writeQuery({\n        query: GET_ROOM,\n        data: {\n          room: {\n            ...room,\n            recordType: [...room.recordType, createOneRecordType].sort((a, b) =>\n              a.id < b.id ? -1 : 1\n            )\n          }\n        }\n      });\n    }\n  });\n\n  const onClick = (event: any) => {\n    if (!currentRoom) return;\n\n    const newRecordType = {\n      active: true,\n      name: name || 'no name',\n      room: { connect: { id: currentRoom.id } },\n      record: { create: [] }\n    };\n    mutation({\n      variables: {\n        newData: newRecordType\n      }\n    });\n  };\n\n  const onChange = (event: any) => {\n    setName(event.target.value);\n  };\n\n  return (\n    <Grid\n      style={{\n        height: '3rem',\n        color: theme.palette.text.primary\n      }}\n      container\n      item\n      xs={12}\n    >\n      <Grid container item xs={2} alignItems={'center'}>\n        <Add />\n      </Grid>\n      <Grid\n        container\n        item\n        xs={10}\n        justify={'space-between'}\n        alignItems={'center'}\n      >\n        <TextField\n          label=\"Add Type\"\n          size=\"small\"\n          style={{ width: '10rem' }}\n          defaultValue={name}\n          onChange={onChange}\n        />\n        <IconButton onClick={onClick} style={{ color: 'inherit' }}>\n          <Done />\n        </IconButton>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default AddType;\n","import React, { useState, useEffect } from 'react';\nimport TypeLabel, { TypeLabelProps } from '../atoms/TypeLabel';\nimport { Typography, Grid, Divider } from '@material-ui/core';\nimport useColors from '../../uses/useColors';\nimport { useCurrentRoom } from '../../uses/useRoom';\nimport getIcon from '../../utils/getIcon';\nimport camelcase from 'camelcase';\nimport AddType from '../atoms/AddType';\n\nexport type TypePanelProps = {};\n\nconst TypePanel: React.FC<TypePanelProps> = (props: TypePanelProps) => {\n  const [recordTypes, setRecordTypes] = useState<\n    {\n      id: number;\n      name: string;\n      color: number[];\n      active: boolean;\n      record: any[];\n    }[]\n  >([]);\n\n  const room = useCurrentRoom();\n  useEffect(() => {\n    if (room) {\n      const newRecordTypes = room.recordType;\n      setRecordTypes(newRecordTypes);\n    }\n  }, [room]);\n\n  return (\n    <>\n      <Typography variant=\"h6\">Layers</Typography>\n      <Divider />\n      <Grid\n        container\n        item\n        xs={12}\n        direction=\"column\"\n        justify=\"space-around\"\n        alignItems=\"stretch\"\n      >\n        {recordTypes.map((item, index) => {\n          const recordType = recordTypes[index];\n          return (\n            <TypeLabel\n              id={recordType.id}\n              icon={getIcon[camelcase(recordType.name)]}\n              label={recordType.name}\n              color={recordType.color}\n              active={recordType.active}\n              canDelete={recordType.record.length === 0}\n            />\n          );\n        })}\n        <AddType />\n      </Grid>\n    </>\n  );\n};\n\nexport default TypePanel;\n","import React, { useState } from 'react';\nimport { Typography, Grid, IconButton } from '@material-ui/core';\nimport { KeyboardArrowDown, HelpOutline } from '@material-ui/icons';\nimport { MotionValue, useTransform, motion } from 'framer-motion';\nimport { useWindowSize } from 'react-use';\n\nexport type TitleProps = { y: MotionValue };\n\nconst TitlePanel: React.FC<TitleProps> = (props: TitleProps) => {\n  const [state, setState] = useState(false);\n  const { height } = useWindowSize();\n  const onClick = () => {\n    props.y.set(state ? -height : 0);\n    setState(!state);\n  };\n\n  const r = useTransform(props.y, [-height, 0], [0, 180]);\n  const y = useTransform(props.y, [-height, 0], [0, height - 192]);\n  const o = useTransform(props.y, [-height, 0], [0, 1]);\n\n  return (\n    <Grid xs={12} item container>\n      <Grid item xs={12}>\n        <Typography\n          variant={'h5'}\n          align={'right'}\n          style={{ paddingRight: '0.2rem' }}\n        >\n          A Bubble City of Davis\n        </Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <Typography\n          variant={'subtitle1'}\n          align={'right'}\n          style={{ paddingRight: '0.2rem' }}\n        >\n          Explorer\n        </Typography>\n      </Grid>\n      <Grid item xs={2}></Grid>\n      <motion.div style={{ rotate: r, y }}>\n        <Grid item xs={12} justify={'center'}>\n          <IconButton\n            onClick={onClick}\n            style={{ color: 'inherit', margin: '-2.4rem 0 0 0' }}\n          >\n            <KeyboardArrowDown style={{ fontSize: 72 }} />\n          </IconButton>\n        </Grid>\n      </motion.div>\n    </Grid>\n  );\n};\n\nexport default TitlePanel;\n","import React, { ReactChildren } from 'react';\nimport ControlPanel, { ControlPanelProps } from '../molecules/ControlPanel';\nimport TypePanel, { TypePanelProps } from '../molecules/TypeLabelPanel';\nimport {\n  makeStyles,\n  Theme,\n  Grid,\n  Divider,\n  IconButton\n} from '@material-ui/core';\nimport TitlePanel from '../molecules/TitlePanel';\nimport { useSpring, motion, useMotionValue, useTransform } from 'framer-motion';\nimport { useWindowSize } from 'react-use';\nimport { HelpOutline } from '@material-ui/icons';\n\nexport type SidebarProps = {\n  controlPanel: ControlPanelProps;\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  titlePanel: {\n    width: '15rem',\n    position: 'absolute',\n    top: '2rem',\n    left: '2.5rem',\n    zIndex: 8\n  },\n  expansion: {\n    height: '100%',\n    width: '20rem',\n    position: 'fixed',\n    zIndex: 7\n  },\n  background: {\n    height: '100%',\n    width: '20rem',\n    backgroundColor: theme.palette.primary.main,\n    position: 'absolute'\n  },\n  glass: {\n    height: '100%',\n    width: '20rem',\n    position: 'absolute',\n    backdropFilter: 'blur(5px)'\n  },\n  contents: {\n    height: '100%',\n    width: '20rem',\n    boxSizing: 'border-box',\n    padding: '7rem 1.25rem',\n    position: 'absolute'\n  }\n}));\n\nconst Sidebar: React.FC<SidebarProps> = (props: SidebarProps) => {\n  const classes = useStyles();\n  const { height } = useWindowSize();\n\n  const y = useSpring(-height, { stiffness: 50, mass: 0.4 });\n  const o = useTransform(y, [-height, 0], [0, 0.2]);\n\n  return (\n    <>\n      <Grid item className={`${classes.titlePanel}`}>\n        <TitlePanel y={y} />\n      </Grid>\n      <motion.div style={{ y }} className={`${classes.expansion}`}>\n        <Grid container item>\n          <Grid item className={`${classes.glass}`}></Grid>\n          <motion.div style={{ opacity: o }}>\n            <Grid item className={`${classes.background}`}></Grid>\n          </motion.div>\n          <Grid item className={`${classes.contents}`}>\n            <Divider style={{ margin: '0.6rem 0 2rem 0' }} />\n            <TypePanel />\n            <ControlPanel\n              title={props.controlPanel.title}\n              sliderArray={props.controlPanel.sliderArray}\n              toggleArray={props.controlPanel.toggleArray}\n            />\n            <Grid\n              item\n              xs={12}\n              style={{\n                color: 'inherit',\n                position: 'absolute',\n                bottom: '2rem',\n                right: '1rem'\n              }}\n            >\n              <a\n                href={'https://github.com/keita-makino/ecs272-2020-f'}\n                target={'blank'}\n              >\n                <IconButton>\n                  <HelpOutline style={{ color: '#999999' }} />\n                </IconButton>\n              </a>\n            </Grid>\n          </Grid>\n        </Grid>\n      </motion.div>\n    </>\n  );\n};\n\nexport default Sidebar;\n","import React from 'react';\nimport { Grid, Icon } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\n\nimport Switch from '@material-ui/core/Switch';\nimport { gql } from 'apollo-boost';\nimport { useQuery, useApolloClient } from '@apollo/react-hooks';\nimport { Visibility, Edit } from '@material-ui/icons';\n\nexport type ToggleLabelProps = {};\n\nexport const GET_MODE = gql`\n  query GetMode {\n    session @client {\n      editMode\n    }\n  }\n`;\n\nconst ChangeMode: React.FC<ToggleLabelProps> = () => {\n  const client = useApolloClient();\n  const { data: session } = useQuery(GET_MODE);\n  const mode = session?.session.editMode;\n  const onChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    checked: boolean\n  ) => {\n    const data = client.readQuery<any>({ query: GET_MODE });\n    client.writeQuery({\n      query: GET_MODE,\n      data: {\n        session: { ...data.session, editMode: checked }\n      }\n    });\n  };\n\n  return (\n    <>\n      <Visibility />\n      <Typography\n        variant=\"body1\"\n        align={'right'}\n        style={{ padding: '0 0.5rem' }}\n      >\n        View\n      </Typography>\n      <Switch checked={mode || false} onChange={onChange} />\n      <Typography\n        variant=\"body1\"\n        align={'right'}\n        style={{ padding: '0 0.5rem' }}\n      >\n        Edit\n      </Typography>\n      <Edit />\n    </>\n  );\n};\n\nexport default ChangeMode;\n","import React from 'react';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport ChangeMode from '../molecules/ChangeMode';\nimport zIndex from '@material-ui/core/styles/zIndex';\nimport ShowComputing from '../molecules/ShowComputing';\n\nexport type MiddlePanelProps = {};\n\nconst useStyles = makeStyles({\n  middlePanel: {\n    maxWidth: '24rem',\n    height: '2rem',\n    position: 'relative',\n    padding: '4rem 0',\n    zIndex: 6\n  }\n});\n\nconst MiddlePanel: React.FC<MiddlePanelProps> = (props: MiddlePanelProps) => {\n  const classes = useStyles();\n  return (\n    <Grid\n      container\n      item\n      className={classes.middlePanel}\n      alignItems={'center'}\n      alignContent={'stretch'}\n    >\n      <ChangeMode />\n    </Grid>\n  );\n};\n\nexport default MiddlePanel;\n","import React from 'react';\n\nimport Map, { MapProps } from '../organisms/Map';\nimport Sidebar, { SidebarProps } from '../organisms/Sidebar';\nimport { makeStyles, Grid, Theme, Box } from '@material-ui/core';\nimport { useWindowSize } from 'react-use';\nimport zIndex from '@material-ui/core/styles/zIndex';\nimport MiddlePanel from '../organisms/MiddlePanel';\n\ntype Props = { sideBarProps: SidebarProps; mapProps: MapProps };\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  wrapper: {\n    color: theme.palette.text.primary,\n    position: 'relative',\n    zIndex: 10\n  },\n  mainVis: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    zIndex: 0\n  }\n}));\n\nconst Index: React.FC<Props> = (props: Props) => {\n  const classes = useStyles();\n  const window = useWindowSize();\n  return (\n    <Grid\n      container\n      item\n      alignItems={'stretch'}\n      className={classes.wrapper}\n      style={{ height: window.height }}\n    >\n      <Grid item container xs={4}>\n        <Sidebar {...props.sideBarProps} />\n      </Grid>\n      <Grid item container xs={8} justify={'center'}>\n        <MiddlePanel />\n      </Grid>\n      <Grid\n        item\n        container\n        xs={12}\n        justify={'center'}\n        className={classes.mainVis}\n      >\n        <Map {...props.mapProps} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Index;\n","const initialStateIndex = {\n  sideBar: {\n    controlPanel: {\n      title: 'Controls',\n      sliderArray: [{ label: 'Cell Size' }, { label: 'Mark Size' }],\n      toggleArray: [\n        { label: 'Dark Mode' },\n        { label: 'Scatter' },\n        { label: 'Edge' },\n        { label: 'Bubble' }\n      ]\n    }\n  },\n  map: {\n    viewState: {\n      longitude: -121.740517,\n      latitude: 38.544907,\n      zoom: 13,\n      pitch: 45,\n      bearing: 30\n    }\n  }\n};\n\nexport default initialStateIndex;\n","import { createMuiTheme, responsiveFontSizes } from '@material-ui/core';\n\nexport const defaultTheme = responsiveFontSizes(\n  createMuiTheme({\n    palette: {\n      primary: {\n        dark: '#523d00',\n        main: '#FFBF00',\n        light: '#FFDF80'\n      },\n      secondary: {\n        dark: '#022851',\n        main: '#6884A3',\n        light: '#9AADC2'\n      },\n      text: {\n        primary: '#022851',\n        secondary: '#FFBF00'\n      }\n    }\n  })\n);\n\nexport const darkTheme = responsiveFontSizes(\n  createMuiTheme({\n    palette: {\n      type: 'dark',\n      primary: {\n        dark: '#523d00',\n        main: '#FFBF00',\n        light: '#FFDF80'\n      },\n      secondary: {\n        dark: '#022851',\n        main: '#6884A3',\n        light: '#9AADC2'\n      },\n      text: {\n        primary: '#FFF9E5',\n        secondary: '#CDD6E0'\n      }\n    }\n  })\n);\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\n\nimport IndexTemplate from '../components/templates/Index';\nimport initialStateIndex from '../data/initialState';\nimport useBusy from '../uses/useBusy';\nimport { MuiThemeProvider } from '@material-ui/core';\nimport { defaultTheme, darkTheme } from '../data/theme';\nimport { useCurrentUser } from '../uses/useUser';\n\ntype Props = {};\n\nconst Index: React.FC<Props> = (props: Props) => {\n  const user = useCurrentUser();\n  return (\n    <MuiThemeProvider theme={user?.setting.darkMode ? darkTheme : defaultTheme}>\n      <IndexTemplate\n        sideBarProps={initialStateIndex.sideBar}\n        mapProps={initialStateIndex.map}\n      />\n    </MuiThemeProvider>\n  );\n};\n\nexport default Index;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}